/*
 *    This module provides no code.  It provides only a Doxygen "Doxygen
 *    information" page.
 */
/**

\file       jack_modes.dox

This document describes some issues and scenarios involving the JACK, live, and
song modes.

\page       jack_modes_page JACK, Live, and Song Modes in Sequencer64
\author     Chris Ahlstrom 2018-01-14

\section jack_modes_intro Introduction

This section describes the interactions between JACK settings and the Live/Song
Mode settings, with an eye to describing the proper behavior of Sequencer64 with
JACK settings, how the Live/Song modes are supposed to work, and what bugs or
issues remain in Sequencer64's JACK handling.

There is currently no description of the 0.90.x line's native JACK MIDI
support, except what is found in the developer's reference manual and in the
updated sequencer64-doc project at GitHub.  We will rectify that at some point.
In the meantime, scan the documentation in the jack_assistant module.

\section jack_modes_bits JACK Bits

\subsection jack_modes_bits_pos JACK Position Bits

JACK Position Bits to support in Sequencer64, their values, their purpose,
and the jack_position_t field they manage:

   -   JackPositionBBT = 0x10. Bar, Beat, Tick.  The fields managed are bar,
       beat, tick, bar_start_tick, beats_per_bar, beat_type, ticks_per_beat,
       beats_per_minute.  Applications that support JackPositionBBT are
       encouraged to also fill the JackBBTFrameOffset.  Note that the BPM is
       quantized to block-size. This means when the tempo is not constant
       within this block, the BPM value should adapted to compensate for
       this. This is different from most fields in the struct, which specify
       the value at the beginning of the block, rather than an average.
   -   JackPositionTimecode = 0x20. External timecode.  The fields managed
       are frame_time and next_time.
   -   JackBBTFrameOffset = 0x40. Offset of BBT information. The sole field
       managed is bbt_offset, the frame offset for the BBT fields. The given
       bar, beat, and tick values actually refer to a time frame_offset
       frames before the start of the cycle.  It should be assumed to be 0 if
       JackBBTFrameOffset is not set. If JackBBTFrameOffset is set and this
       value is zero, the BBT time refers to the first frame of this cycle.
       If the value is positive, the BBT time refers to a frame that many
       frames before the start of the cycle.
   -   Summary list:
       - JackVideoFrameOffset = 0x100
       - JackAudioVideoRatio  = 0x080
       - JackBBTFrameOffset   = 0x040
       - JackPositionTimecode = 0x020
       - JackPositionBBT      = 0x010

Only JackPositionBBT is supported so far.  Applications that support
JackPositionBBT are encouraged to also fill the JackBBTFrameOffset-managed
field (bbt_offset).  We are experimenting with this for now; there's not a
lot of material out there on the Web.

\subsection jack_modes_bits_status JACK Status Bits

Jack Status Bits support diagnosing run-time issue in JACK.
For reference, here are the enumeration values from /usr/include/jack/types.h:

\verbatim
        JackFailure         = 0x01
        JackInvalidOption   = 0x02
        JackNameNotUnique   = 0x04
        JackServerStarted   = 0x08
        JackServerFailed    = 0x10
        JackServerError     = 0x20
        JackNoSuchClient    = 0x40
        JackLoadFailure     = 0x80
        JackInitFailure     = 0x100
        JackShmFailure      = 0x200
        JackVersionError    = 0x400
        JackBackendError    = 0x800
        JackClientZombie    = 0x1000
\endverbatim

\section jack_modes_functions JACK Functions

Please study the following URL and note these important points:

\verbatim
    http://jackaudio.org/files/docs/html/transport-design.html
\endverbatim

<ul>
 <li> The timebase master continuously updates position
      information, beats, timecode, etc.  There is at most one master active at
      a time. If no client is registered as timebase master, frame numbers will
      be the only position information available.
 <li> The timebase master registers a callback that updates position
      information while transport is rolling. Its output affects the following
      process cycle. This function is called immediately after the process
      callback in the same thread whenever the transport is rolling, or when
      any client has set a new position in the previous cycle.
 <li> Clients that don't declare a sync callback are assumed ready
      immediately, anytime the transport wants to start. If a client
      doesn't require slow-sync processing, it can set its sync callback
      to NULL.
 <li> The transport state is always valid; initially it is
      JackTransportStopped.
 <li> When someone calls <tt>jack_transport_start()</tt>,
      the engine resets the
      poll bits and changes to a new state, JackTransportStarting.
 <li> When all slow-sync clients are ready, the state changes to
      JackTransportRolling.
</ul>

Does Sequencer64 need a latency callback?

\verbatim
    http://jackaudio.org/files/docs/html/group__ClientCallbacks.html
\endverbatim

The next section provide summaries of some the JACK functions used in the
jack_assistant and (soon) the midi_jack modules.

\subsection jack_client_open jack_client_open ()

Open a client session with a JACK server. More complex and
powerful than <tt>jack_client_new()</tt>.
Clients choose which of several
servers to connect, and how to start the server automatically, if
not already running. There is also an option for JACK to generate
a unique client name.

\verbatim
	const char * 	client_name,
	jack_options_t 	options,
	jack_status_t * 	status,
		... 
\endverbatim

client_name	of at most jack_client_name_size() characters. The name scope is
local to each server. Unless forbidden by the JackUseExactName option, the
server will modify this name to create a unique variant, if needed.

options formed by OR-ing together JackOptions bits. Only the
JackOpenOptions bits are allowed.

status (if non-NULL) an address for JACK to return information from the open
operation. This status word is formed by OR-ing together the relevant
JackStatus bits.

Optional parameters: depending on corresponding [options bits] additional
parameters may follow status (in this order).

[JackServerName] (char *) server_name selects from among several possible
concurrent server instances. Server names are unique to each user. If
unspecified, use "default" unless $JACK_DEFAULT_SERVER is defined in the
process environment.

It returns an
opaque client handle if successful. If this is NULL, the open operation
failed, and *status includes JackFailure, and the caller is not a JACK
client.

\subsection jack_on_shutdown jack_on_shutdown ()

Registers a function to call when the JACK server shuts down the
client thread. It must be an asynchonrous POSIX signal
handler: only async-safe functions, executed from another thread.
A typical function might set a flag or write to a pipe so that the
rest of the application knows that the JACK client thread has shut
down.  Clients do not need to call this function. It only helps
clients understand what is going on. It should be called before
<tt>jack_client_activate()</tt>.

\subsection jack_set_sync_callback jack_set_sync_callback ()

Register/unregister as a slow-sync client; it can't respond
immediately to transport position changes.  The callback is run at
the first opportunity after registration: if the client is active,
this is the next process cycle, otherwise it is the first cycle
after <tt>jack_activate()</tt>.  After that, it runs as per
JackSyncCallback rules.  Clients that don't set this callback are
assumed ready immediately any time the transport wants to start.

\subsection jack_set_process_callback jack_set_process_callback ()

Tells the JACK server to call the callback whenever there is work.
The function must be suitable for real-time execution, it cannot
call functions that might block for a long time: malloc(), free(),
printf(), pthread_mutex_lock(), sleep(), wait(), poll(), select(),
pthread_join(), pthread_cond_wait(), etc.  In the current class,
this function is a do-nothing function.

\subsection jack_set_session_callback jack_set_session_callback ()

Tells the JACK server to call the callback when a session event is
delivered.  Setting more than one session callback per process is
probably a design error.  For a multiclient application, it's more
sensible to create a JACK client with only one session callback.

\subsection jack_activate jack_activate ()

Tells the JACK server that the application is ready to start
processing.

\subsection jack_set_timebase_callback jack_set_timebase_callback ()

   TODO

\subsection jack_release_timebase jack_release_timebase ()

Used in tearing down the JACK transport infrastructure.

   TODO

\subsection jack_client_close jack_client_close ()

   TODO

\subsection jack_transport_start jack_transport_start ()

Starts the JACK transport rolling.  Any client can make this
request at any time. It takes effect no sooner than the next
process cycle, perhaps later if there are slow-sync clients. This
function is realtime-safe.  No return code.

Found this note in the Hydrogen code:

   <i>When jack_transport_start() is called, it takes effect from the next
   processing cycle.  The location info from the timebase_master, if
   there is one, will not be available until the _next_ next cycle.  The
   code must therefore wait one cycle before syncing up with
   timebase_master.</i>

\subsection jack_transport_stop jack_transport_stop ()

Stops the JACK transport from rolling.  Any client can make this
request at any time.  This function is realtime-safe.  No return
code.

\subsection jack_transport_locate jack_transport_locate ()

Repositions the transport to a new frame number.  May be called at
any time by any client. The new position takes effect in two
process cycles. If there are slow-sync clients and the transport is
already rolling, it will enter the JackTransportStarting state and
begin invoking their sync_callbacks until ready. This function is
realtime-safe.

   http://jackaudio.org/files/docs/html/transport-design.html

jack_BBT_position() is not necessary to change jack position.

\subsection jack_transport_reposition jack_transport_reposition ()

Request a new transport position.  May be called at any time by any
client. The new position takes effect in two process cycles. If
there are slow-sync clients and the transport is already rolling,
it will enter the JackTransportStarting state and begin invoking
their sync_callbacks until ready. This function is realtime-safe.
This call, made in the position() function, is currently disabled.

Its \a pos parameter provides the requested new transport position.
Fill pos->valid to specify which fields should be taken into account.
If you mark a set of fields as valid, you are expected to fill them
all.  Note that "frame" is always assumed, and generally needs to be
set: http://comments.gmane.org/gmane.comp.audio.jackit/18705

Returns 0 if a valid request, EINVAL if the position structure is
rejected.

\subsection jack_transport_query jack_transport_query ()

Query the current transport state and position.  This function is
realtime-safe, and can be called from any thread. If called from the process
thread, pos corresponds to the first frame of the current cycle and the
state returned is valid for the entire cycle.

The first parameter is the client, which is a pointer to the JACK client
structure.

The second parameter is a pointer to structure for returning current
transport position; pos->valid will show which fields contain valid data. If
pos is NULL, do not return position information.

This function returns the current transport state.

\section jack_modes_operation Modes Operation

\subsection jack_modes_op_no_jack_live No JACK, Live Mode

In <tt>~/.config/sequencer64/sequencer64.rc</tt>, set:

<ul>
     <li>   jack_transport = 0
     <li>   jack_master = 0
     <li>   jack_master_cond = 0
     <li>   song_start_mode = 0
</ul>

By changing the start mode to 0 (false), Sequencer64 is put into Live Mode.
With this setting, control of the muting and unmuting of patterns
resides in the main window (the patterns window).  One can start
the playback in the performance (song) window, but it will not affect
which patterns play, at all.

Note that this option is part of the <i>File / Options / JACK/LASH</i>
configuration page.

\subsection jack_modes_op_no_jack_song No JACK, Song Mode

In <tt>~/.config/sequencer64/sequencer64.rc</tt>, set:

<ul>
     <li>   jack_transport = 0
     <li>   jack_master = 0
     <li>   jack_master_cond = 0
     <li>   song_start_mode = 1
</ul>

By changing the start mode to 1 (true), Sequencer64 is put into Song Mode.

With this setting, control of the muting and unmuting of patterns
resides in the song window (the performance window).  The patterns shown in the
pattern slots of the main window turn on and off whenever the progress bar
is in the pattern as drawn in the perforance window.

Note that this option is part of the <i>File / Options / JACK/LASH</i>
configuration page.

\subsection jack_modes_op_jack_transport JACK Transport

In <tt>~/.config/sequencer64/sequencer64.rc</tt>, set:

<ul>
     <li>   jack_transport = 1
     <li>   jack_master = 0
     <li>   jack_master_cond = 0
     <li>   song_start_mode = 0 or 1 (see previous section)
</ul>

The current behavior is that qjackctl and sequencer64 playback/progress seem to
be independent of each other.

The workaround seems to be to set seq24/sequencer64 as JACK Master, or if
another <i>application</i> (e.g. Qtractor) is JACK Master.

OLD BEHAVIOR.
Start qjackctl, verify that it sets up correctly, then click it's
"play" button to start the transport rolling.  Run sequencer64, load a
file.  Then note that starting playback (whether in the main window or
in the performance window) is ineffective, but resets the time counter
in qjackctl.  Why?  With JACK sync enabled by the macro:

\verbatim
   [JACK transport slave]
   jack sync(): zero frame rate [single report]!?
   [JackTransportRolling]
   [JackTransportStarting]  (every time space bar pressed)
   [Start playback]
   . . .
\endverbatim

End of OLD BEHAVIOR.

\section jack_modes_breakage Breakage

Old message about seq24 being broken appears here.

   http://lists.linuxaudio.org/pipermail/linux-audio-user/2010-November/073848.html

\verbatim
   i dont see the transport synchronisation working with a jack1 svn version.
   you are still using only a sync callback.

   and you are relying on the transport to go through the
   JackTransportStarting state.

   this issue should be fixed.
   iirc we came to the conclusion, that seq24 is broken, and we will not
   revert the changes in jack, which break it.

   the quick and dirty fix on your side, would be to register an empty
   process_callback.

   but the issue still remains. seq24 is NOT a slow sync client. but it
   registers a sync_callback. 
   and it even takes a lock in the sync callback.

   the patch for jack-session support didnt get merged either.
\endverbatim

Another one (no need for a URL):

\verbatim
   I use seq24 for the majority of my projects but it isn't ideal (I should
   point out that I never finish anything). I don't like seq24's pianoroll
   editor, the way you do CC envelopes isn't ideal, it uses alsa-midi, there's
   unnecessary complexity in switching from pattern-trigger mode to song mode,
   and its insistence on being transport master while not even being able to
   adjust tempo when live is annoying
\endverbatim

\section jack_modes_references JACK References

<ul>
   <li>  http://libremusicproduction.com/articles/demystifying-jack-%E2%80%93-beginners-guide-getting-started-jack
   <li>  http://jackaudio.org/files/docs/html/transport-design.html
   <li>  http://kxstudio.linuxaudio.org/Repositories
   <li>  http://www.rossbencina.com/code/real-time-audio-programming-101-time-waits-for-nothing
   <li> http://vagar.org/wordpress/?tag=jack-midi
</ul>

 */

/*
 * jack_modes.dox
 *
 * vim: ts=3 sw=3 et syntax=doxygen
 */
