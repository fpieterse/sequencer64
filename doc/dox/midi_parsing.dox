/*
 *    This module provides no code.  It provides only a Doxygen "Doxygen
 *    information" page.
 */
/**

\file       midi_parsing.dox

This document describes how Sequencer64 parses a MIDI file.

\page       midi_parsing_page MIDI File Parsing in Sequencer64
\author     Chris Ahlstrom 2018-01-14

\section midi_parsing_intro Introduction

This section describes the parsing of a MIDI file (and a few other topics).
We wanted to add the reading of SMF 0 files to <i>Sequencer64</i>.
We started with the main format that is supported, SMF 1.  Once we understood
that we, we figured out how to split a SMF 0 tracks correctly.

We split the midifile::parse() function into two sections.  The first section
analyzes the header of the MIDI.  Then, based on whether the file is SMF 1 (the
normal case) or SMF 0, either the parse_smf_1() function of or the
parse_smf_0() function is called.  The parse_smf_0() function creates one
sequence object per channel present in the SMF 0 file, plus the original track.
The last pattern slot (sequence 16) will contain the original track data, and
the rest will contain common data and then channel data for each channel.
After the parsing is done, all the tracks (including the original track) will
be added to the performance.  The user then has the option of deleting the
original track, which will be the last track.

One note about the portability of <i>Sequencer64</i> MIDI files.
The <i>Rosegarden</i> sequencer reads them well, as does <i>Ardour</i>,
which also plays it properly (ignoring the triggers).  The <i>Python</i>
program <i>mido3-player</i> does not handle the sequence number (0x3FFF) of the
proprietary track, but that is really a bug in mido.

Another thing to note is that the sorting of the events can vary from save to
save, which is harmless, if annoying to the programmers.

\section midi_parsing_smf_1 SMF 1 Parsing

This section describes the parsing of the header chunk, MThd, and the track
chunk, MTrk.

The midifile::parse() function starts by opening the MIDI file, getting its
file-size, pre-allocating the data vector to that size, reading all of the
characters into that vector, and then closing the file.

\subsection midi_parsing_smf_1_mthd MIDI File Header, MThd

The data of the header is read:

\verbatim
   Header ID:     "MThd"         read_long()       4 bytes
   MThd length:     6            read_long()       4 bytes
   Format:        0, 1, 2        read_short()      2 bytes
   No. of track:  1 or more      read_short()      2 bytes
   PPQN:           192           read_short()      2 bytes
\endverbatim

The header ID and it's length are always the same values.  The formats that
Sequencer64 supports are 0 or 1.  SMF 0 has only one track, while SMF 1 can
support an arbitary number of tracks.  The last value in the header is the PPQN
value, which specifies the "pulses per quarter note", which is the basic
time-resolution of events in the MIDI file.  Common values are 96 or 192, but
higher values are also common.  Sequencer64 and its precursor, Seq24, default
to 192.

\subsection midi_parsing_smf_1_mtrk MIDI Track, MTrk

Sequencer64 next reads the tracks specified in the file.  Each track is assumed
to cover a different MIDI channel, but always the same MIDI buss.  (The MIDI
buss is not a data item in standard MIDI files, but it is a special data item
in Seq24/Sequencer64 MIDI files.)  Each track is tagged by a standard chunk
marker, "MTrk".  Other markers are possible, and are to be ignored, if nothing
else.  Here are the values read at the beginning of a track:

\verbatim
   Track ID:      "MTrk"         read_long()       4 bytes
   Track length:  varies         read_long()       4 bytes
\endverbatim

The track length is the number of bytes that need to be read in order to get
all of the data in the track.

Next, a new sequence object is created, with the PPQN value passed to its
constructor.  The sequence then is hooked to the master MIDI buss object.
The "RunningTime" accumulator is set to 0 for that track.

Next, the parse() function loops through the rest of the track, reading data
and logging it to the sequence.  Let's go through the loop, which is the meat
of the processing.

TODO:  An empty event is created before track processing, and re-used for every
track and event.  This seems dangerous.  We moved the event constructor two
levels of nesting deeper, and it seems to work fine.

<b>Delta time</b>.
The amount time that passes from one event to the next is the <i>delta
time</i>.  For some events, the time doesn't matter, and is set to 0.
This values is a <i>variable length value</i>, also known as a "VLV" or
a "varinum".   It provides a way of encoding arbitrarily large values, a byte
at a time.  For now, just note that a varinum is 1 or more bytes, and MIDI
provides a way to tell when the varinum is complete.

\verbatim
   Delta time:    varies         read_varinum()    1 or more bytes
\endverbatim

\subsubsection midi_parsing_smf_1_channel  Channel Events

<b>Status</b>.
The byte after the delta time is examined by masking it against 0x80 to check
the high bit.  If not set, it is a "running status", it is replaced with the
"last status", which is 0 at first.

\verbatim
   Status byte:   varies         read_byte()       1 byte
\endverbatim

If the high bit is set, it is a status, and is passed to the setter
<code>event::set_status()</code>.

The "RunningTime" accumulator is incremented by the delta-time.  The current
time is adjusted as per the PPQN ratio, if needed, and passed to the setter
<code>event::set_timestamp()</code>.

Now what does the status mean?  First, the channel part of the status is masked
out using the 0xF0 mask.

If it is a 2-data-byte event (note on, note off, aftertouch, control-change, or
pitch-wheel), then the two data bytes are read:

\verbatim
   Data byte 0:   varies         read_byte()       1 byte
   Data byte 1:   varies         read_byte()       1 byte
\endverbatim

If the status is a note-on event, with data[1] = 0, then it is converted to a
note-off event, a fix for the output quirks of some MIDI devices, and the
status of the event is amended to EVENT_NOTE_OFF.

If it is a 1-data-btye event (program change or channel pressure), then only
data byte 0 is read.

Then the one or two data bytes are added to the event by overloads of
<code>event::set_data()</code>, the event is added to the current sequence by
<code>sequence::add_event()</code>, and the MIDI channel of the sequence is set
by <code>sequence::set_midi_channel()</code>.

Note that this is the point where parsing could detect a change in channel, and
select a new sequence to support that channel, and add the events to that
sequence, if the file were SMF 0.

Also note that the channel of the sequence is set every a new channel
event/status is read.  This should be done once, and then simply warned about
if a non-matching channel occurs.

Lastly, note that it might be better to do the sequence function calls at the
end of processing the event.

\subsubsection midi_parsing_smf_1_meta  Meta Events

If the event status masks off to 0xF0 (0xF0 to 0xFF), then it is a meta event.
If the status is 0xFF, it is called a "Sequencer-specific", or "SeqSpec" event.
For this kind of event, then a type byte and the length of the event are
read.

\verbatim
   Meta type:     varies         read_byte()       1 byte
   Meta length:   varies         read_varinum()    1 or more bytes
\endverbatim

If the type of the SeqSpec (0xFF) meta event is 0x7F, parsing checks to see if
it is one of the Seq24 "proprietary" events.  These events are tagged with
various values that mask off to 0x24240000.  The parser reads the tag:

\verbatim
   Prop tag:     0x242400nn      read_long()       4 bytes
\endverbatim

These tags provide a way to save and recover Seq24/Sequencer64 properties from
the MIDI file: MIDI buss, MIDI channel, time signature, sequence triggers, and
(new), the key, scale, and background sequence to use with the track/sequence.
Any leftover data for the tagged event is let go.  Unknown tags ate skipped.

If the type of the SeqSpec (0xFF) meta event is 0x2F, then it is the
End-of-Track marker.  The current time is set using
<code>sequence::set_length()</code> and then
<code>sequence::zero_markers()</code> is called, and parsing is done for
that track.

If the type of the SeqSpec (0xFF) meta event is 0x03, then it is the sequence
name.  The "length" number of bytes are read, and loaded by
<code>sequence::set_name()</code>.

If the type of the SeqSpec (0xFF) meta event is 0x00, then it is the sequence
number, which is read:

\verbatim
   Seq number:    varies         read_short()      2 bytes
\endverbatim

Note that the sequence number might be modified later to account for the
current screenset in force for a file import operation.

Anything other SeqSpec type is simply skipped by reading the "length" number of
bytes.

To summarize the process, here are the relevant event and sequence setter
calls typically made while parsing a MIDI track:

   -# <code>perform::add_sequence()</code>
      -# <code>sequence::sequence()</code>
      -# <code>sequence::set_master_midi_bus())</code>
      -# <code>sequence::add_event()</code>
         -# <code>event::event()</code>
         -# <code>event::set_status()</code>
         -# <code>event::set_timestamp()</code>
         -# <code>event::set_data()</code>
      -# <code>sequence::set_midi_channel()</code>
      -# <code>sequence::set_length()</code>
      -# <code>sequence::zero_markers()</code>
      -# <code>sequence::set_name()</code>
      -# <code>sequence::set_midi_bus()</code>
   -# <code>xxxxx::yyyy()</code>

\subsection midi_parsing_smf_1_meta_seq  Sequence Number Meta Event

The old Seq24 application, and hence Sequencer64, add the sequence-number meta
event to imported tunes that are then exported.  This event has the format
<code>FF 00 02 ss ss</code>, where <code>ss ss</code> is the sequence number,
which is a variable-length value that can range from 0 to 0x3FFF (16383).
This code is a feature of SMF 2 files, which Seq24 and Sequencer24 don't really
handle.  Here is the first track of a basic MIDI file:

\verbatim
   MThd 1 130 120
   MTrk
   0 TimeSig 4/4 24 8
   0 KeySig 0 major
   0 Tempo 461538
   0 Meta TrkEnd
   TrkEnd
\endverbatim

When written by Seq24, there are extra events emitted, and the PPQN is modified
to the Seq24 standard of 192.  These differences are marked with an asterisk:

\verbatim
*  MThd 1 130 192
   MTrk
*  0 SeqNr 0
   0 Meta SeqName "Untitled"
*  0 SeqSpec 24 24 00 08
*  0 SeqSpec 24 24 00 01 00
*  0 SeqSpec 24 24 00 06 04 04
*  0 SeqSpec 24 24 00 02 00
*  48 Meta TrkEnd
   TrkEnd
\endverbatim

Also note that Seq24 does not export the time-signature, tempo, and
key-signature events.  Sequencer64 emits the time-signature and tempo events,
but not the key-signature.  It also emits some extra SeqSpec values.

\verbatim
*  MThd 1 130 192
   MTrk
*  0 SeqNr 0
   0 Meta SeqName "Untitled"
   0 Tempo 461538
   0 TimeSig 4/4 24 8
*  0 SeqSpec 24 24 00 08
*  0 SeqSpec 24 24 00 01 00
*  0 SeqSpec 24 24 00 06 04 04
*  0 SeqSpec 24 24 00 02 00
*  0 SeqSpec 24 24 00 14 01
   768 Meta TrkEnd
   TrkEnd
\endverbatim

Again, the sequence-number is not an SMF 1 value, but SMF 2.
So we seem to be writing a hybrid format.  More to learn!

\subsection midi_parsing_smf_1_meta_sum  Meta Events Summary

Here, we summarize the MIDI meta events for your edification.

   -# <code>FF 00 02 ssss</code>: Sequence Number.
   -# <code>FF 01 len text</code>: Text Event.
   -# <code>FF 02 len text</code>: Copyright Notice.
   -# <code>FF 03 len text</code>: Sequence/Track Name.
   -# <code>FF 04 len text</code>: Instrument Name.
   -# <code>FF 05 len text</code>: Lyric.
   -# <code>FF 06 len text</code>: Marker.
   -# <code>FF 07 len text</code>: Cue Point.
   -# <code>FF 08 len text</code>: Patch/program Name.
   -# <code>FF 09 len text</code>: Device Name.
   -# <code>FF 0A through 0F len text</code>: Other kinds of text events.
   -# <code>FF 20 01 cc</code>: MIDI channel (obsolete, used by Cakewalk)
   -# <code>FF 21 01 pp</code>: MIDI port (obsolete, used by Cakewalk)
   -# <code>FF 2F 00</code>: End of Track.
   -# <code>FF 51 03 tttttt</code>: Set Tempo, us/qn.
   -# <code>FF 54 05 hr mn se fr ff</code>: SMPTE Offset.
   -# <code>FF 58 04 nn dd cc bb</code>: Time Signature.
   -# <code>FF 59 02 sf mi</code>: Key Signature.
   -# <code>FF 7F len data</code>: Sequencer-Specific.

The next sections describe the events that <i>Sequencer</i> tries to handle.
These are 

   -  Sequence Number (0x00)
   -  Track Name (0x03)
   -  End-of-Track (0x2F)
   -  Set Tempo (0x51) (Sequencer64 only)
   -  Time Signature (0x58) (Sequencer64 only)
   -  Sequencer-Specific (0x7F)
   -  System Exclusive (0xF0) Sort of handled, functionality incomplete..

\subsubsection midi_parsing_smf_1_number  Sequence Number (0x00)

\verbatim
   FF 00 02 ss ss
\endverbatim

This optional event must occur at the beginning of a track,
before any non-zero delta-times, and before any transmittable MIDI
events.  It specifies the number of a sequence.

\subsubsection midi_parsing_smf_1_name  Track/Sequence Name (0x03)

\verbatim
   FF 03 len text
\endverbatim

If in a format 0 track, or the first track in a format 1 file, the name
of the sequence.  Otherwise, the name of the track.

\subsubsection midi_parsing_smf_1_eot  End of Track (0x2F)

\verbatim
   FF 2F 00
\endverbatim

This event is not optional.  It is included so that an exact ending
point may be specified for the track, so that it has an exact length,
which is necessary for tracks which are looped or concatenated.

\subsubsection midi_parsing_smf_1_tempo  Set Tempo Event (0x51)

The MIDI Set Tempo meta event sets the tempo of a MIDI sequence in terms of
the microseconds per quarter note.  This is a meta message, so this event is
never sent over MIDI ports to a MIDI device.

After the delta time, this event consists of six bytes of data:

\verbatim
   FF 51 03 tt tt tt
\endverbatim

Example:

\verbatim
   FF 51 03 07 A1 20
\endverbatim

   -# 0xFF is the status byte that indicates this is a Meta event.
   -# 0x51 the meta event type that signifies this is a Set Tempo event.
   -# 0x03 is the length of the event, always 3 bytes.
   -# The remaining three bytes carry the number of microseconds per quarter
      note.  For example, the three bytes above form the hexadecimal value
      0x07A120 (500000 decimal), which means that there are 500,000
      microseconds per quarter note.

Since there are 60,000,000 microseconds per minute, the event above
translates to: set the tempo to 60,000,000 / 500,000 = 120 quarter notes per
minute (120 beats per minute).  This is a 24-bit binary value, so 
each byte covers the full range of 0x00 to 0xFF.

This event normally appears in the first track. If not, the default tempo is
120 beats per minute.
This event is important if the MIDI time division is
specified in "pulses per quarter note", which does not itself define the length
of the quarter note. The length of the quarter note is then determined by the
Set Tempo meta event.

Representing tempos as time per beat instead of beat per time
allows absolutely exact DWORD-term synchronization with a time-based sync
protocol such as SMPTE time code or MIDI time code.  This amount of
accuracy provided by this tempo resolution allows a four-minute piece at
120 beats per minute to be accurate within 500 usec at the end of the
piece.

We have now added the Tempo meta event (and the Time Signature meta event) to
the track, which allows other sequencers to obtain these values from a
Sequencer64 MIDI file.  Here are the original headers for a normal MIDI file
and its legacy (Seq24) conversion, as shown by the <i>midicvt</i> application:

\verbatim
hymne.asc                           hymne-ppqn-384.asc

MThd 1 4 96                         MThd 1 4 384
MTrk                                MTrk
0 Meta SeqName "Vangelis: Hymne"    0 SeqNr 0
0 TimeSig 4/4 24 8                  0 Meta SeqName "Vangelis: Hymne"
0 Tempo 750000                      0 SeqSpec 24 24 00 08       (no triggers)
0 Meta TrkEnd                       0 SeqSpec 24 24 00 01 00    (MIDI buss 0)
TrkEnd                              0 SeqSpec 24 24 00 06 04 04 (beats, width)
                                    0 SeqSpec 24 24 00 02 00    (MIDI ch. 0)
                                    96 Meta TrkEnd
                                    TrkEnd
\endverbatim

(<i>midicvt</i> is available at https://github.com/ahlstromcj/midicvt.)

Here is the header data that result from the new conversion, which is used if
the "legacy" option is not in force:

\verbatim
   MThd 1 4 192
   MTrk
   0 SeqNr 0
   0 Meta SeqName "Vangelis: Hymne"
   0 TimeSig 4/4 24 8
   0 Tempo 750000
   0 SeqSpec 24 24 00 08
   0 SeqSpec 24 24 00 01 00
   0 SeqSpec 24 24 00 06 04 04
   0 SeqSpec 24 24 00 02 00
   48 Meta TrkEnd
   TrkEnd
\endverbatim

\subsubsection midi_parsing_smf_1_timesig  Time Signature Event (0x58)

After the delta time, this event consists of seven bytes of data:

\verbatim
   FF 58 04 nn dd cc bb
\endverbatim

The time signature is expressed as four numbers.  <code>nn</code> and
<code>dd</code> represent the numerator and denominator of the time signature
as it would be notated.  The numerator counts the number of beats in a measure
(beats per measure or beats per bar).  The denominator is a negative power of
two:  2 represents a quarter-note, 3 represents an eighth-note, etc.  The
denominator specifies the unit of the beat (e.g. 4 or 8).  In
Seq24/Sequencer64, this value is also called the "beat width".

The <code>cc</code> parameter expresses the number of MIDI clocks (or "ticks",
or "pulses") in a metronome click.  The standard MIDI clock ticks 24 times per
quarter note, so a value of 6 would mean the metronome clicks every 1/8th note.
A <code>cc</code> value of 6 would mean that the metronome clicks once every
1/8th of a note (quaver). This MIDI clock is different from the clock (PPQN)
that determines the start time and duration of the notes.

The <code>bb</code> parameter expresses the number of notated 32nd-notes in a
MIDI quarter note (24 MIDI Clocks).
The usual value for this parameter is 8, though some sequencers allow the user
to specify that what MIDI thinks of as a quarter note, should be notated as
something else.  For example, a value of 16 means that the music plays two
quarter notes for each quarter note metered out by the MIDI clock, so that the
music plays at double speed.

Examples:

\verbatim
   FF 58 04 04 02 18 08
\endverbatim

   -# 0xFF is the status byte that indicates this is a Meta event.
   -# 0x58 the meta event type that signifies this is a Time Signature event.
   -# 0x04 is the length of the event, always 4 bytes.
   -# 0x04 is the numerator of the time signature, and ranges from 0x00 to
      0xFF.
   -# 0x02 is the log base 2 of the denominator, and is the power to which 2
      must be raised to get the denominator.  Here, the denominator is 2 to
      0x02, or 4, so the time signature is 4/4.
   -# 0x18 is the metronome pulse in terms of the number of
      MIDI clock ticks per click.  Assuming 24 MIDI clocks per quarter note,
      the value here (0x18 = 24) indidicates that the metronome will tick every
      24/24 quarter note.  If the value of the sixth byte were 0x30 = 48, the
      metronome clicks every two quarter notes, i.e. every half-note.
   -# 0x08 defines the number of 32nd notes per beat. This byte is usually 8
      as there is usually one quarter note per beat, and one quarter note
      contains eight 32nd notes.

A time signature of 6/8, with a metronome click every 3rd 1/8 note, would be
encoded:

\verbatim
   FF 58 04 06 03 24 08
\endverbatim

Remember, a 1/4 note is 24 MIDI Clocks, therefore a bar of 6/8 is 72 MIDI
Clocks.  Hence 3 1/8 notes is 36 (=0x24) MIDI Clocks.

There should generally be a Time Signature Meta event at the beginning of a
track (at time = 0), otherwise a default 4/4 time signature will be assumed.
Thereafter they can be used to effect an immediate time signature change at
any point within a track.

For a format 1 MIDI file, Time Signature Meta events should only occur within
the first MTrk chunk.

If a time signature event is not present in a MIDI sequence, 4/4 signature is
assumed.

In <i>Sequencer64</i>, the c_timesig SeqSpec event is given priority.  The
conventional time signature is used only if the c_timesig SeqSpec is not
present in the file.  NEEDS TO BE TESTED.

\subsubsection midi_parsing_smf_1_sysex  SysEx Event (0xF0)

If the meta event status value is 0xF0, it is called a "System-exclusive", or
"SysEx" event.

\verbatim
   F0 len data F7
\endverbatim

<i>Sequencer64</i> has some code in place to store these messages, but the data
is currently not actually stored or used.
Although there is some infrastructure to support storing the SysEx event within
a sequence, the SysEx information is simply skipped.
<i>Sequencer64</i>  warns if the
terminating 0xF7 SysEx terminator is not found at the expected length.
Also, some malformed SysEx events have been encountered, and those are
detected and skipped as well.

\subsubsection midi_parsing_smf_1_seqspec  Sequencer Specific (0x7F)

This data, also known as SeqSpec data, provides a way to encode information
that a specific sequencer application needs, while marking it so that other
sequences can safely ignore the information.

\verbatim
   FF 7F len data
\endverbatim

In <i>Seq24</i> and <i>Sequencer64</i>, the data portion starts with four bytes
that indicate the kind of data for a particular SeqSpec event:

\verbatim
   c_midibus        ^  0x24240001  Track buss number
   c_midich         ^  0x24240002  Track channel number
   c_midiclocks     *  0x24240003  Track clocking
   c_triggers       ^  0x24240004  See c_triggers_new
   c_notes          *  0x24240005  Song data, notes
   c_timesig        ^  0x24240006  Track time signature
   c_bpmtag         *  0x24240007  Song beats/minute
   c_triggers_new   ^  0x24240008  Track trigger data
   c_mutegroups     *  0x24240009  Song mute group data
   c_midictrl       *  0x24240010  Song MIDI control
   c_musickey       +  0x24240011  Track key (Sequencer64 only)
   c_musicscale     +  0x24240012  Track scale (Sequencer64 only)
   c_backsequence   +  0x24240013  Track background sequence (Sequencer64 only)

   * = global only; ^ = track only; + = both
\endverbatim

In <i>Seq24</i>, these events are placed at the end of the song, but are
not marked as SeqSpec data.  Most MIDI applications handle this situation fine,
but some (e.g. <i>midicvt</i>) do not.  Therefore, <i>Sequencer64</i> makes
sure to wrap each data item in the 0xFF 0x7F (SeqSpec) wrapper.

Also, the last three items above (key, scale, and background sequence)
can also be stored (by <i>Sequencer64</i>) with a particular sequence/track, as
well as at the end of the song.  Not sure if this bit of extra flexibility is
useful, but it is there.

\subsubsection midi_parsing_smf_1_end  Non-Specific End of Sequence

Any other statuses are deemed unsupportable in <i>Sequencer64</i>, and abort
parsing with an error.

If the --bus option is in force, <code>sequence::set_midi_bus()</code> is
called to override the buss number (if any) stored with the sequence.

Finally, <code>perform::add_sequence()</code> adds the sequence to the
encoded tune.

\section midi_parsing_smf_0 SMF 0 Parsing

After parsing SMF 1 track data, we end up with a number of sequences, each on a
different MIDI channel.  With SMF 0, data for all channels is present in a
single track.  Sequencer64 will read SMF 0 data, but we really need to be able
to have one MIDI channel per track.  So we need to take the data from the
sequence and use it to make more sequences.

   -  <code>sequence::add_event()</code>.
   -  <code>sequence::set_midi_channel()</code>.
   -  <code>sequence::set_length()</code>.
   -  <code>sequence::set_midi_bus()</code>.
   -  <code>perform::add_sequence()</code>.

This code basically works.
For now, please look at the source code for more details.
Also, the reading of SMF 0 MIDI files is described in the
<i>sequencer64-doc</i> project on GitHub.

\section midi_parsing_rs Running Status

When we apply the <i>midicvt</i> application to a file saved by
<i>Sequencer64</i>, we can end up with a successful ASCII conversion that ends
with an error message:

\verbatim
   $ midicvt hymne-seq64.midi -o hymne-seq64.asc
   ? Error at MIDI file offset 12155 [0x2f7b]
   Error: Garbage at end 'readtrack(): unexpected running status'
\endverbatim

Is this a problem in <i>midicvt</i> or <i>Sequencer4</i>?
Let's learn about running status.

Running status is a way to speed up the sending of MIDI bytes to a synthesizer
or sequencer by taking advantage of redundancy where possible.  For example, if
we're sending a consecutive group of Note On and Note Off messages to a
particular channel, we can save some time by not sending the channel status
byte after the first time.  Here's an example with Note On on channel 1:

\verbatim
   0x90 3C 7F
   0x90 40 7F
   0x90 43 F3
\endverbatim

Since no change in status occurs after the first of these three events, we can
drop the subsequent status bytes:

\verbatim
   0x90 3C 7F
   40 7F
   43 F3
\endverbatim

The 0x90 byte is saved in a "running status buffer" (RSB), and is filled in by
the receiving device.

Here is the sequence of events for operating with running status.

   -# Clear the RSB buffer (RSB = 0) to start.
   -# If a <b>Voice Category Status</b> (VCS) byte is received, then set
      RSB = VCS.  VCS bytes range from 0x80 to 0xEF.  This is binary
      1000000 to 11100000.
   -# If a data byte is received (data bytes range from 0x00 to 0x7F,
      binary 0000000 to 0111111; that is, bit 7 is always 0 in a data byte):
      -# If RSB != 0, first insert the RSB into the incoming data stream, then
         insert the data byte.
      -# If RSB == 0, then just insert the data byte into the incoming data
         stream.
   -# Clear the RSB buffer (RSB = 0) when a System Common Message (SCM) status
      byte is received.  SCM bytes range from 0xF0 to 0xF7.
   -# The message after an SCM <b>must</b> begin with a status byte.
      That is a byte with bit 7 set.
   -# Do no special action when a Realtime Category Message (RCM) byte is
      received.  RCM bytes range from 0xF8 to 0xFF.

Note that some events, such as Tempo, assume that its bytes are all data bytes.

\section midi_parsing_save_changes MIDI Save Changes

Things have progressed over the months with the conversion and saving of MIDI
files.  For example, when we read the <tt>CountryStrum.mid</tt> file and save
it, in recent versions of <i>Sequencer64</i> (e.g. 0.94.0 and above),
the new version is a lot longer (59 Kbytes) than the version saved previously
(33 Kbytes).  What accounts for this difference?

Well, converting both versions to ASCII via <i>midicvt</i> reveals that the
newer version of <i>Sequencer64</i> adds missing Note Off events to the file.
And there are a lot of them!  Almost doubles the size of the file, naturally.

In addition, SeqSpec <code>24 24 00 02</code> (channel number has been added to
some tracks).  SeqSpec <code>24 24 00 08</code> adds data that wasn't output
before.  And SeqSpec <code>24 24 00 14</code> (sequence transpose) has been
added.
SeqSpec <code>24 24 00 07</code> (song BPM) now shows the proper BPM from the
conversion.
Finally, the magic number for the final, proprietary track has been changed
from <code>0x7777</code> to the MIDI-compliant value of <code>0x3FFF</code>.

Another bunch of data, <code>24 24 00 09</code> (mute groups), is still
present, but there are now options to eliminate its 4096 bytes of data.


 */

/*
 * midi_parsing.dox
 *
 * vim: ts=3 sw=3 et syntax=doxygen
 */
